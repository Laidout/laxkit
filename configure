#!/bin/bash
#
##
## Laxkit configure
##
#
#
# --help
# --prefix=/blah/blah



LAXKITVERSION=0.0.8.1
LAXKITCONFIGDIRBASE="~/.config/laxkit"
#LAXKITCONFIGDIR="$LAXKITCONFIGDIRBASE/$LAXKITVERSION"
PREFIX="/usr/local"

#---capabilities
#user provided:
EXTRA_CPPFLAGS=
#automatically generated:
EXTRA_CFLAGS=
EXTRA_LIBS=
OPTIONAL=
OPTIONALLIBS=

#USE_XLIB_RENDER (previously USEXLIB) to compile functions for the xlib rendering backend
USE_XLIB_RENDER="no"
USECAIRO="yes"
USEIMLIB="not build"
USEGRAPHICSMAGICK="build"
USEXINPUT2="yes"
USEGL="yes"
USESQLITE="yes"

HARFBUZZVERSION="2.0"
ONAMAC="no"
FORCE="no"
RELOCATABLE="no"
MAKE_LAXKIT_PC="yes"
LAXKIT_PC_LIBS=""

CONFIGCOMMAND="./configure $@"


 #x11, or (unimplemented): qt, headless
PLATFORM="x11"

LAXKITBACKEND="cairo"


if [ ! -e /usr/include/X11/extensions/XInput2.h ] ; then unset USEXINPUT2; fi


 ##
 ## Parse options
 ##
while true ; do
  ARG=$1;
  if [ x$ARG == x ] ; then break; fi
  
  option=`expr "x$ARG" : 'x\([^=]*\)=.*'`;
  if [ x$option == x ] ; then
    option="$ARG"; 
  fi
  
  optarg=`expr "x$ARG" : 'x[^=]*=\(.*\)'`;
  #echo "option=$option,   optarg=$optarg"

  case "$option" in
    -h | --help) 
        echo "Whizbang Laxkit configuration script options."
		echo ""
        echo " --help                       Show this stuff"
        echo " --prefix=/where/to/install   Defaults to $PREFIX"
        echo " --configdir=/path/to/config  Defaults to $LAXKITCONFIGDIRBASE/$LAXKITVERSION"
		echo " --platform=x11               Only x11 is implemented. Someday also headless or qt."
#		echo " --disable-gl                 Do not build opengl components. Default is to built them."
        echo " --disable-graphicsmagick     Do not build GraphicsMagick components. Default is to $USEGRAPHICSMAGICK them."
        echo " --enable-graphicsmagick      Build GraphicsMagick components. Default is to $USEGRAPHICSMAGICK them."
#       echo " --disable-cairo              Do not build cairo components. Default is to build them."
#       echo " --disable-xinput2            Use this option if you do not have at least Xorg 7.5 for MPX."
        echo " --disable-sqlite             If not disabled, sqlite is Used to get font tags in Fontmatrix database (if it exists)"
        echo " --enable-imlib               Build Imlib2 components. Default is to $USEIMLIB them."
        echo " --disable-imlib              Don't build Imlib2 components. Default is to $USEIMLIB them."
		echo " --backend=cairo              Only cairo is supported for now."
		echo " --harfbuzz=2.0               What version of harfbuzz you are using. Preferably use 2.0 or later."
#       echo " --onamac                     Include this if you are compiling on a Mac."
        echo " --extra-cppflags             Any extra compile flags, such as location of includes not"
        echo "                                otherwise detected"
		echo " --relocatable                If present, do not configure with hardcoded paths. All resource paths"
        echo "                                will be determined at runtime relative to the executable."
#		echo " --make-pkgconfig             Create a laxkit.pc file that pkg-config can understand."
		echo " --force                      Try to compile even when libraries are not detected by ./configure"
		echo " --version=OtherVersionNum    You may force Laxkit to compile with a different"
		echo "                                version string."
        echo ""
		exit 1 ;;

    --force)
		FORCE="yes"
		shift ;;

#	--make-pkgconfig)
#		MAKE_LAXKIT_PC="yes"
#		shift ;;

	--relocatable)
        RELOCATABLE="yes";
        shift ;;

	--extra-cppflags)
        if [ -z $optarg ] ; then
          optarg=$2
          shift
        fi
        EXTRA_CPPFLAGS="$EXTRA_CPPFLAGS $optarg"
        shift ;;

    --onamac)
		ONAMAC="yes"
		shift ;;

	--disable-gl)
		unset USEGL
		shift;;

	--disable-graphicsmagick)
		unset USEGRAPHICSMAGICK
		shift;;

	--enable-graphicsmagick)
		USEGRAPHICSMAGICK="yes"
		shift;;

	--enable-imlib)
		USEIMLIB="yes"
		shift;;

	--disable-imlib)
		unset USEIMLIB
		shift;;

	--disable-cairo)
		unset USECAIRO
		shift;;

	--disable-xinput2)
		unset USEXINPUT2
		shift;;

	--disable-sqlite)
		unset USESQLITE
		shift;;

	--harfbuzz)
		HARFBUZZVERSION=$optarg;
		shift;;

    -p | --prefix)  
        if [ -z $optarg ] ; then 
          optarg=$2
          shift
        fi
		PREFIX="$optarg"
        #echo prefix $optarg ;
        shift ;;

	--configdir)
        if [ -z $optarg ] ; then 
          optarg=$2
          shift
        fi
		LAXKITCONFIGDIR="$optarg"
		shift ;;

    --backend | -b)  
        if [ -z $optarg ] ; then 
          optarg=$2
          shift
        fi
		LAXKITBACKEND="$optarg"
        #echo version $optarg ;
        shift ;;

    --platform | -P)  
        if [ -z $optarg ] ; then 
          optarg=$2
          shift
        fi
		PLATFORM="$optarg"
        #echo version $optarg ;
        shift ;;

    --version | -v)  
        if [ -z $optarg ] ; then 
          optarg=$2
          shift
        fi
		LAXKITVERSION="$optarg"
        #echo version $optarg ;
        shift ;;

    *) echo "Unrecognized option $option $optarg" ; exit 1 ;;
  esac
done


if [ "$USEIMLIB" == "build" ] ;  then USEIMLIB="yes"; elif [ "$USEIMLIB" != "yes" ] ; then unset USEIMLIB;  fi
if [ "$USEGRAPHICSMAGICK" == "build" ] ;  then USEGRAPHICSMAGICK="yes"; elif [ "$USEGRAPHICSMAGICK" != "yes" ] ; then unset USEGRAPHICSMAGICK;  fi

EXTRA_CFLAGS="$EXTRA_CFLAGS $EXTRA_CPPFLAGS `pkg-config --cflags GraphicsMagick++`";


#if [ x$USEIMLIB$USECAIRO == x ] ; 
if [ x$USECAIRO == x ] ; 
	#then echo "You must use at least one of Imlib or Cairo."; 
	then echo "You must use Cairo."; 
	exit 1;
fi


if [ x$LAXKITCONFIGDIR == x ] ; then
	LAXKITCONFIGDIR="$LAXKITCONFIGDIRBASE/$LAXKITVERSION"
fi


# do check for required libraries:

 ## The stuff in NEED can be checked with pkg-config. Not all libraries
 ## can be checked this way! (notably cups, apparently)
NEED='x11  freetype2  harfbuzz'
if [ x$USEIMLIB != x ] ;          then NEED="$NEED imlib2";           fi
if [ x$USECAIRO != x ] ;          then NEED="$NEED cairo";            fi
if [ x$USEGRAPHICSMAGICK != x ] ; then NEED="$NEED GraphicsMagick++"; fi
NUM='1'

for NAME in $NEED; do
    echo -n Checking for $NAME......;
    if [ "`pkg-config --exists --print-errors --errors-to-stdout $NAME`"xxx != "xxx" ] ; then 
        echo "You need to install the development package of $NAME."; 
        NUM="";
    else 
        echo "ok"; 
    fi
done
#echo NUM=$NUM

OPTIONAL=''
if [ x$USESQLITE != x ] ; then OPTIONAL="$OPTIONAL sqlite3"; fi
for NAME in $OPTIONAL; do
    echo -n Checking for $NAME......;
    if [ "`pkg-config --exists --print-errors --errors-to-stdout $NAME`"xxx != "xxx" ] ; then 
		if [ $NAME == 'sqlite3' ] ; then
	        echo "Didn't find $NAME. Install that to get access to Fontmatrix tags."; 
		else 
			echo "Couldn't find optional $NAME. Skipping.";
		fi
    else 
		OPTIONALLIBS="$OPTIONALLIBS $NAME"
        echo "ok"; 
    fi
done

 ## cups doesn't seem to have a pkg-config entry, so try to check for their custom cups-config
echo -n Checking for cups......;
if [ ! `builtin type -p cups-config` ] ; then
    echo "Can't find cups-config. You might need to install the development package of Cups."; 
    NUM="";

else echo "ok";
fi


echo



if [ "$NUM" != "1" -a $FORCE=="no" ]; then
    echo "Too many problems to proceed! Use --force to override."
	exit 1
fi


#if [[ $PLATFORM != "x11" && $PLATFORM != "mac" && $PLATFORM != "windows" ]] ;
#if [ $PLATFORM != "x11" -a $PLATFORM != "headless" -a $PLATFORM != "qt" ] ;
if [ $PLATFORM != "x11" ] ; then
	echo "Unknown platform $PLATFORM!";
	exit 1
#	then PLATFORM="x11";
fi


#
# Set up extra libraries
#
if [ x$USEIMLIB != x ] ; then
	EXTRA_LIBS="$EXTRA_LIBS `imlib2-config --libs`";
fi

if [ x$USEGRAPHICSMAGICK != x ] ; then
	EXTRA_CFLAGS="$EXTRA_CFLAGS `pkg-config --cflags GraphicsMagick++`";
	EXTRA_LIBS="$EXTRA_LIBS `pkg-config --libs GraphicsMagick++`";
	LAXKIT_PC_LIBS="$LAXKIT_PC_LIBS GraphicsMagick++"
fi

if [ x$USEXLIB != x ] ; then
	EXTRA_LIBS="$EXTRA_LIBS -lXft"
fi


#
# Make laxkit.pc
#
if [ $MAKE_LAXKIT_PC == "yes" ] ; then
echo "prefix=$PREFIX" > laxkit.pc
echo "exec_prefix=\${prefix}" >> laxkit.pc
echo "libdir=\${exec_prefix}/lib" >> laxkit.pc
echo "includedir=\${prefix}/include/laxkit/$LAXKITVERSION" >> laxkit.pc
echo "" >> laxkit.pc
echo "Name: laxkit" >> laxkit.pc
echo "Version: $LAXKITVERSION" >> laxkit.pc
echo "Description: C++ Window Library" >> laxkit.pc
echo "Requires: harfbuzz >= 2.0 fontconfig $OPTIONALLIBS $NEED" >> laxkit.pc
#echo "Libs: -L\${libdir} -llaxinterfaces -llaxkit -lXext -lXi -lXrandr -lcrypto -lzip" >> laxkit.pc
echo "Libs: -L\${libdir} -llaxkit -lXext -lXi -lXrandr -lcrypto -lzip" >> laxkit.pc
echo "Cflags: -I\${includedir}" >> laxkit.pc
fi



 ##
 ## generate lax/version.h
 ## 
echo "Generating lax/version.h..."

echo " // ---- THIS FILE IS AUTOMATICALLY GENERATED -----" > lax/version.h
echo " // ----          BY ../configure             -----" >> lax/version.h
echo "#ifndef _LAX_VERSION_H" >> lax/version.h
echo "#define _LAX_VERSION_H" >> lax/version.h
echo "" >> lax/version.h
echo "#define LAXKIT_VERSION  \"$LAXKITVERSION\"" >> lax/version.h
echo "" >> lax/version.h
echo "#endif" >> lax/version.h
echo "" >> lax/version.h



 ##
 ## generate lax/configured.h
 ##
echo "Generating lax/configured.h..."

FINALPREFIX=$PREFIX
if [ $RELOCATABLE == "yes" ] ; then FINALPREFIX=".."; fi

echo " // ---- THIS FILE IS AUTOMATICALLY GENERATED -----" > lax/configured.h
echo " // ----          BY ../configure             -----" >> lax/configured.h
echo "#ifndef _LAX_CONFIGURED_H" >> lax/configured.h
echo "#define _LAX_CONFIGURED_H" >> lax/configured.h
echo "" >> lax/configured.h
if [ $RELOCATABLE == "yes" ] ; then echo " //Configured paths are relative to the executable at runtime" >> lax/configured.h; fi
echo "#define LAX_INSTALL_PREFIX   \"$FINALPREFIX\"" >> lax/configured.h
echo "#define LAX_SHARED_DIRECTORY \"$FINALPREFIX/share/laxkit/$LAXKITVERSION/\"" >> lax/configured.h
echo "#define LAX_CONFIG_DIRECTORY \"$LAXKITCONFIGDIR\"" >> lax/configured.h
echo "" >> lax/configured.h

if [ $PLATFORM == "x11"      ] ; then echo "#define _LAX_PLATFORM_XLIB"     >> lax/configured.h ; fi
if [ $PLATFORM == "qt"       ] ; then echo "#define _LAX_PLATFORM_QT"       >> lax/configured.h ; fi
if [ $PLATFORM == "headless" ] ; then echo "#define _LAX_PLATFORM_HEADLESS" >> lax/configured.h ; fi

echo "#define LAX_DEFAULT_BACKEND \"$LAXKITBACKEND\"" >> lax/configured.h
if [ x$USEGL      != x ] ; then echo "#define LAX_USES_GL" >> lax/configured.h; fi
if [ x$USEXLIB    != x ] ; then echo "#define LAX_USES_XLIB" >> lax/configured.h; fi
if [ x$USEXINPUT2 != x ] ; then echo "#define LAX_USES_XINPUT2" >> lax/configured.h; fi
if [ x$USEIMLIB   != x ] ; then echo "#define LAX_USES_IMLIB" >> lax/configured.h; fi
if [ x$USECAIRO   != x ] ; then echo "#define LAX_USES_CAIRO" >> lax/configured.h; fi
if [ x$USEGRAPHICSMAGICK != x ] ; then echo "#define LAX_USES_GRAPHICSMAGICK" >> lax/configured.h; fi
if [ x$USESQLITE  != x ] ; then echo "#define LAX_USES_SQLITE" >> lax/configured.h; fi
echo "" >> lax/configured.h
echo "#endif" >> lax/configured.h
echo "" >> lax/configured.h



if [ $HARFBUZZVERSION \< "2.0" ] ; then EXTRA_CFLAGS="$EXTRA_CFLAGS -DHARFBUZZ_BELOW_2_0"; fi

 ##
 ## generate Makefile-toinclude
 ##
echo "Generating ./Makefile-toinclude..."

echo " # ---- THIS FILE IS AUTOMATICALLY GENERATED -----" > Makefile-toinclude
echo " # ----          BY ./configure             -----" >> Makefile-toinclude
echo "" >> Makefile-toinclude
echo "PREFIX=$PREFIX" >> Makefile-toinclude
echo "LAXKITVERSION=$LAXKITVERSION" >> Makefile-toinclude
echo "EXTRA_LAX_CFLAGS=$EXTRA_CFLAGS" >> Makefile-toinclude
echo "EXTRA_LAX_LIBS=$EXTRA_LIBS" >> Makefile-toinclude
echo "OPTIONALLIBS=$OPTIONALLIBS" >> Makefile-toinclude
if [ x$USESQLITE  != x ] ; then echo "LAX_USES_SQLITE=yes" >> Makefile-toinclude; fi
echo "" >> Makefile-toinclude



 ##
 ## write out config.log
 ##
echo "$CONFIGCOMMAND"                              > config.log
echo "" >> config.log
echo \
"     Laxkit Configuration Summary
" `date` "  
----------------------------------
  Laxkit version:  $LAXKITVERSION
  Lax Config dir:  $LAXKITCONFIGDIR
    Install here:  $PREFIX
" >> config.log

#if [ x$USEXINPUT2 != x ] ; 
#then echo "        Use XInput2:  yes" >> config.log; 
#else echo "        Use XInput2:  no"  >> config.log; 
#fi
if [ x$USEGRAPHICSMAGICK != x ] ; 
then echo " Use GraphicsMagick:  yes" >> config.log; 
else echo " Use GraphicsMagick:  no"  >> config.log; 
fi
if [ x$USECAIRO != x ] ; 
then echo "          Use Cairo:  yes" >> config.log; 
else echo "          Use Cairo:  no"  >> config.log; 
fi
if [ x$USEIMLIB != x ] ; 
then echo "         Use Imlib2:  yes" >> config.log; 
else echo "         Use Imlib2:  no"  >> config.log; 
fi
if [ x$USEGL != x ] ; 
then echo "             Use GL:  yes" >> config.log; 
else echo "             Use GL:  no"  >> config.log; 
fi
if [ x$USESQLITE != x ] ; 
then echo "         Use Sqlite:  yes" >> config.log; 
else echo "         Use Sqlite:  no"  >> config.log; 
fi
echo      "     Extra cppflags:  $EXTRA_CPPFLAGS"   >> config.log;
echo      "        Relocatable:  $RELOCATABLE"      >> config.log;
echo      "           Harfbuzz:  $HARFBUZZVERSION"  >> config.log;
echo      "    Default backend:  $LAXKITBACKEND"    >> config.log;
echo      "           Platform:  $PLATFORM"         >> config.log;



 ##
 ## Echo to console
 ##
echo $CONFIGCOMMAND
echo 
echo "    Laxkit Configuration Summary"
echo "     " `date`
echo "----------------------------------------"
echo "     Laxkit version:  $LAXKITVERSION"
echo "     Lax Config dir:  $LAXKITCONFIGDIR"
echo "       Install here:  $PREFIX"

#if [ x$USEXINPUT2 != x ] ; 
#then echo "        Use XInput2:  yes"; 
#else echo "        Use XInput2:  no"; 
#fi
if [ x$USEGRAPHICSMAGICK != x ] ; 
then echo " Use GraphicsMagick:  yes"; 
else echo " Use GraphicsMagick:  no" ; 
fi
if [ x$USECAIRO != x ] ; 
then echo "          Use Cairo:  yes"; 
else echo "          Use Cairo:  no"; 
fi
if [ x$USEIMLIB != x ] ; 
then echo "         Use Imlib2:  yes"; 
else echo "         Use Imlib2:  no"; 
fi
if [ x$USEGL != x ] ; 
then echo "             Use GL:  yes"; 
else echo "             Use GL:  no"; 
fi
if [ x$USESQLITE != x ] ; 
then echo "         Use Sqlite:  yes"; 
else echo "         Use Sqlite:  no" ; 
fi
echo      "     Extra cppflags:  $EXTRA_CPPFLAGS"
echo      "        Relocatable:  $RELOCATABLE"
echo      "           Harfbuzz:  $HARFBUZZVERSION"
echo      "    Default backend:  $LAXKITBACKEND"
echo      "           Platform:  $PLATFORM"
echo
echo "Now type make to build.";

